<style>
  #preview-bar-iframe {
    display: none;
  }

  body,
  html {
    background-color: #FFF7E8;
  }
</style>

{{ 'isotope.min.js' | asset_url | script_tag }}
{{ 'ScrollTrigger.min.js' | asset_url | script_tag }}

<div class="h-10"></div>

<h1 class="text-6xl mt-16 mb-8 text-center md:mb-4 md:mt-32 md:w-1/3 md:mx-auto" style="color: #5200FF;">
  CRYSTALS FOR YOUR MOOD
</h1>

<!-- --------------------------------------------------------
MOOD FILTERS UI
-------------------------------------------------------- -->

<div class="moodFilterContain w-screen z-10">
  <div class="moodFilter w-screen flex md:justify-center py-2 md:mb-4 overflow-x-scroll">
    
    {%- comment -%}
    --------------------------------------------------------
    MOOD BUTTONS
    --------------------------------------------------------
    Creates a button for every tag in the entire collection with all the click handlers and animations
    {%- endcomment -%}
    
    {% for tag in collection.all_tags %}
  
      <div class="py-2 px-4">
  
        <button class="filter{{ tag | capitalize}} filterBtn filterBtn{{ tag | capitalize}}" style="border: solid #5200FF; border-width: 0 0 0 0;">
  
          <div class="crystal-icon-{{ tag | lowercase}} flex justify-center opacity-0">
  
            <svg width="20" height="26" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0)" stroke="#5200FF" stroke-width="1.5">
                <path clip-rule="evenodd"
                  d="M3.142 5.024L.82 8.236v8.953l4.476 6.918 4.725.536 8.564-7.002.594-9.405-5.851-7.235H9.607L3.142 5.024z" />
                <path
                  d="M13.254 1.001l.559 4.023L19.16 8.25M13.831 5.045L8.978 8.042H5.916l-2.78-2.997M5.27 24.13l.632-1.536 3.046-.196 1.791 1.6M5.898 7.964V22.59M8.938 8.042v14.315" />
              </g>
              <defs>
                <clipPath id="clip0">
                  <path fill="#fff" d="M0 0h20v25.6H0z" />
                </clipPath>
              </defs>
            </svg>
  
          </div>
  
          {{ tag }}
  
        </button>
  
      </div>
  
  
      <script>
  
        {%- comment -%}
        --------------------------------------------------------
        CRYSTAL ANIMATIONS
        --------------------------------------------------------
        {%- endcomment -%}
  
        let crystalIcon{{ tag | capitalize }}AnimIn = gsap.timeline({
          paused: true,
          defaults: {
            ease: 'power3.out'
          }
        });
  
        let crystalIcon{{ tag | capitalize }}AnimOut = gsap.timeline({
          paused: true
        });
  
        crystalIcon{{ tag | capitalize }}AnimIn
          .set('.crystal-icon-{{ tag | lowercase}}', {
            opacity: 0,
            y: 30,
            rotation: -90
          })
          .add('key1')
          .to('.crystal-icon-{{ tag | lowercase}}', {
            duration: 0.5,
            opacity: 1,
            y: 0,
            rotation: 0
          }, 'key1')
          .to('.filterBtn{{ tag | capitalize }}', {
            duration: 0.5,
            borderWidth: '0 0 4px 0'
          }, 'key1');
  
  
        crystalIcon{{ tag | capitalize }}AnimOut
          .to('.crystal-icon-{{ tag | lowercase}}', {
            duration: 0.5,
            y: 30,
            opacity: 0,
            rotation: 180
          })
          .to('.filterBtn{{ tag | capitalize }}', {
            duration: 0.25,
            borderWidth: '0 0 0 0'
          });
  
        {%- comment -%}
        --------------------------------------------------------
        MOOD CLICK ANIMATION TRIGGERS & ACTIONS
        --------------------------------------------------------
        Get that button and on click invoke the isotope filter to only show items with that tag class name
        {%- endcomment -%}
  
        let filter{{ tag | capitalize }} = document.querySelector('.filter{{ tag | capitalize }}');
  
        filter{{ tag | capitalize }}.addEventListener('click', () => {
  
          filter{{ tag | capitalize }}.focus();
          crystalIcon{{ tag | capitalize }}AnimIn.restart();
          crystalIcon{{ tag | capitalize }}AnimIn.play();
  
          iso.arrange({
            filter: '.{{ tag | lowercase }}',
            sortBy: 'order',
            hiddenStyle: {
              opacity: 0,
              transform: 'scale(0.8)'
            },
            visibleStyle: {
              opacity: 1,
              transform: 'scale(1)'
            }
          });

          iso.arrange('updateSortData');

          {%- comment -%}
          --------------------------------------------------------
          CHANGING MOOD TITLE & DESCRIPTION ON MOOD CLICK
          --------------------------------------------------------
          {%- endcomment -%}


          let collectionTitle = '{{ collections[tag].title | lowercase }}';
          let collectionDescription = '{{ collections[tag].description | escape }}';
          document.querySelector('.moodTitle').innerHTML = collectionTitle;
          document.querySelector('.moodDescription').innerHTML = collectionDescription;
        

          // --------------------------------------------------------
          // VIBE IMAGES
          // --------------------------------------------------------
          
          {% comment %}
            Subtract 3 vibe images and moodInfo block from number of product in mood
          {% endcomment %}
          let numProductsInMood = document.querySelectorAll('.{{ tag }}').length - 4;
          console.log(numProductsInMood);

          // iso.layout();
  
          if (numProductsInMood <= 7) {
            document.querySelector('.vibe1{{ tag }}').style.display = 'block';
            document.querySelector('.vibe2{{ tag }}').style.display = 'none';
            document.querySelector('.vibe3{{ tag }}').style.display = 'none';
            console.log('1 Vibe Image')
          } else if (numProductsInMood >= 8 && numProductsInMood <= 14 ) {
            document.querySelector('.vibe1{{ tag }}').style.display = 'block';
            document.querySelector('.vibe2{{ tag }}').style.display = 'block';
            document.querySelector('.vibe3{{ tag }}').style.display = 'none';
            console.log('2 Vibe Images')
          } else {
            document.querySelector('.vibe1{{ tag }}').style.display = 'block';
            document.querySelector('.vibe2{{ tag }}').style.display = 'block';
            document.querySelector('.vibe3{{ tag }}').style.display = 'block';
            console.log('3 Vibe Images')
          }
  
        });
  
        {%- comment -%}
        --------------------------------------------------------
        MOOD UI OUT ANIMATIONS WHEN USER CLICKS NEXT MOOD
        --------------------------------------------------------
        Get that button and on click invoke the isotope filter to only show items with that tag class name
        {%- endcomment -%}
  
        filter{{ tag | capitalize }}.addEventListener('focusout', () => {
  
          crystalIcon{{ tag | capitalize }}AnimOut.restart();
  
        });
  
        filter{{ tag | capitalize }}.addEventListener('touchcancel', () => {
  
          crystalIcon{{ tag | capitalize }}AnimOut.restart();
  
        });
  
      </script>
  
    {% endfor %}
  
  </div>
</div>

<!-- --------------------------------------------------------
PRODUCT GRID
-------------------------------------------------------- -->

<div class="flex justify-center">

  <div class="productGrid mx-4">

    <!-- --------------------------------------------------------
    MOOD TITLE & DESCRIPTION
    -------------------------------------------------------- -->
    
    <div class="flex flex-col justify-center px-2 productGrid-item moodInfo {{ collection.all_tags | join: ' ' }}">
      
      <h1 class="moodTitle pb-2 ">
        {{- collection.title -}}
      </h1>
      
      <div class="moodDescription">
        {{- collection.description -}}
      </div>
      
    </div> 
    
    <!-- CRYSTALZ -->

    {% for product in collection.products %}

    <a class="productGrid-item{% for tag in product.tags %} {{ tag }}{% endfor %}" href="{{ product.url }}" data-order="{% increment variable %}">

      <div>
        {{ product.images[0] | img_url: '700x' | img_tag }}
      </div>

      <div class="productGrid-item__content flex flex-col">

        <div class="productGrid-item__title px-2 pt-2 lg:pt-6">
          {{- product.title -}}
        </div>

        <div class="productGrid-item__description hidden xl:block">
          {{- product.description -}}
        </div>

        <div class="productGrid-item__price text-right pr-2" style="color: #EEF835;">
          {{- product.price | money_without_trailing_zeros -}}
        </div>

      </div>

    </a>

    {% endfor %}


    {%- comment -%}
      --------------------------------------------------------
      CREATES VIBE IMAGE SETS FOR EACH MOOD
      --------------------------------------------------------
    {%- endcomment -%}
    

    {% for tag in collection.all_tags %}
      
      <!--Vibe Image 1 -->

      <div class="productGrid-item vibe1{{ tag }} {{ tag }}" data-order="5.5">
        {%- capture vibe1 -%}
          {{ tag }}-vibe-1.png
        {%- endcapture -%}
        {{ vibe1 | file_img_url: 'master' | img_tag }}
      </div>

      <!-- Vibe Image 2 -->

      <div class="productGrid-item vibe2{{ tag }} {{ tag }}" data-order="10.5">
        {%- capture vibe2 -%}
          {{ tag }}-vibe-2.png
        {%- endcapture -%}
        {{ vibe2 | file_img_url: 'master' | img_tag }}
      </div>

      <!-- Vibe Image 3 -->

      <div class="productGrid-item vibe3{{ tag }} {{ tag }}" data-order="99">
        {%- capture vibe3 -%}
          {{ tag }}-vibe-3.png
        {%- endcapture -%}
        {{ vibe3 | file_img_url: 'master' | img_tag }}
      </div>

    {%- endfor -%}


  </div>
</div>

{%- comment -%}
--------------------------------------------------------
STICKY MOOD FILTER ANIMATION
--------------------------------------------------------
{%- endcomment -%}

<script>

  let moodFilterMobileAnim = gsap.timeline({
    scrollTrigger: {
      trigger: '.moodFilterContain',
      start: 'top top',
      endTrigger: '.site-footer',
      end: 'bottom bottom',
      toggleActions: "play none none reverse"
    }
  });

  moodFilterMobileAnim
    .set('.moodFilter', {
      position: 'fixed',
      top: 0,
      height: 100,
      zIndex: '20'
    })
    .set('.productGrid', {
      margin: '85px 0 48px 0'
    })
    .to('.moodFilter', {
      background: 'linear-gradient(180deg, #EEF835 80%, rgba(255, 255, 255, 0) 100%)',
      ease: "power3.out",
      duration: 0.1 });

</script>

{%- comment -%}
--------------------------------------------------------
ISOTOPE SETTINGS
--------------------------------------------------------
{%- endcomment -%}


<script>

  let productGrid = document.querySelector('.productGrid');
  let productGridItem = document.querySelector('.productGrid-item');
  let iso = new Isotope(productGrid, {
    itemSelector: '.productGrid-item',
    stamp: '.stamp',
    percentPosition: true,
    layoutMode: 'masonry',
    masonry: {
      gutter: 8,
      columnWidth: productGridItem,
      fitWidth: true,
      resize: true
    },
    getSortData: {
      order: '[data-order] parseFloat'
    }
  });

  // iso.arrange('updateSortData');

  // Load page with ALL selected

  filterAll.click();

</script>